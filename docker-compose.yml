version: '3.7'

x-host-gateway: &host-gateway
  - host.docker.internal:host-gateway

x-grpc-debug-envs: &grc-debug-envs
  - GRPC_TRACE=call_stream
  - GRPC_VERBOSITY=DEBUG
services:
  # scheduler:
  # container_name: ${APP_NAME}-SCHEDULER
  # build:
  #   context: .
  #   dockerfile: apps/core/Dockerfile
  # image: mellywins/ezyfs-scheduler:latest
  # volumes:
  #   - .:/usr/src/app
  #   - /usr/src/app/node_modules
  # ports:
  #   - 3006:3000
  # environment: *grc-debug-envs
  # # command: npx nest start --watch
  # networks:
  #   webnet:
  #     ipv4_address: 172.28.1.7

  registration_authority:
    container_name: ${APP_NAME}-REGISTRATION_AUTHORITY
    build:
      context: .
      dockerfile: apps/registration-authority/Dockerfile
    image: mellywins/ezyfs-registration-authority:latest
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3001:3000
    environment: *grc-debug-envs
    # command: npx nest start --watch
    networks:
      webnet:
        ipv4_address: 172.28.1.2

  notifications:
    container_name: ${APP_NAME}-NOTIFICATIONS
    build:
      context: .
      dockerfile: apps/notifications/Dockerfile
    image: mellywins/ezyfs-notifications:latest
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3005:3000
    environment: *grc-debug-envs

    # command: npx nest start --watch
    networks:
      webnet:
        ipv4_address: 172.28.1.4

  api-gateway:
    container_name: ${APP_NAME}-api-gateway
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    image: mellywins/ezyfs-api-gateway:latest
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3002:3000
    env_file: .env
    # command: npx nest start --watch
    networks:
      webnet:
        ipv4_address: 172.28.1.3

  postgres:
    container_name: postgres
    image: postgres
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', 'postgres', '-U', 'postgres']
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # - APP_DB_USER=docker
      # - APP_DB_PASS=docker
      # - APP_DB_NAME=docker
    networks:
      - webnet
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./docker/db_scripts/multiple_postgres_db.sh:/docker-entrypoint-initdb.d/multiple_postgres_db.sh
  redis:
    container_name: ${REDIS_HOST}
    image: 'redis:alpine'
    command:
      - redis-server
    networks:
      - webnet
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./redis-data:/var/lib/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf
  consul-server:
    image: consul:1.9.3
    container_name: consul-server
    restart: always
    # volumes:
    #   - ./server1.json:/consul/config/server1.json:ro
    #   - ./certs/:/consul/config/certs/:ro
    logging:
      driver: none
    networks:
      - webnet
    ports:
      - '8500:8500'
      - '8600:8600/tcp'
      - '8600:8600/udp'
    volumes:
      - .:/usr/src/app

networks:
  webnet:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
volumes:
  pgdata:
