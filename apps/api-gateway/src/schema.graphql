# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Email {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  sentDate: DateTime!
  emailType: EmailTypeEnum!
  sender: User!
  token: String!
  verificationToken: String!
  isExpired: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EmailTypeEnum {
  CONFIRMATION
  RESET_PASSWORD
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  username: String!
  firstname: String
  lastname: String
  completedSignUp: Boolean!
  age: Float
  email: String!
  localization: String
  telNumber: String
  isConfirmed: Boolean!
  sentEmails: [Email!]
  Jobs: [User!]
  lowerCasedUsername: String!
  gender: Gender
  roles: [UserRoleEnum!]!
}

enum Gender {
  MALE
  FEMALE
}

enum UserRoleEnum {
  ADMIN
  USER
}

type CryptographicJob {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  JobId: String!
  description: String!
  jobType: ProcessorType!
  sourcePath: String
  outputPath: String
  sourceType: SourceTypeEnum!
  owner: User!
  cronString: String
  startDate: DateTime
  endDate: DateTime
  lastExecutionDate: DateTime
  lastExecutionStatus: ExecutionStatusEnum
  attemptsMade: Float
  failedReason: String
  stacktrace: String
  finishedOn: DateTime
  processedOn: DateTime
  ancestorJob: CryptographicJob
  childJobs: [CryptographicJob!]
  jobTypeSpec: EncDecType!
}

enum ProcessorType {
  ENCRYPTION
  DECRYPTION
  COMPRESSION
  DECOMPRESSION
}

enum SourceTypeEnum {
  FILE
  DIRECTORY
}

enum ExecutionStatusEnum {
  SUCCESS
  FAILED
  PAUSED
  CANCELED
  DELAYED
  WAITING
  ACTIVE
}

enum EncDecType {
  PGP
  HYBRID
}

type TokenModel {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type BoolValue {
  value: Boolean!
}

type Query {
  users: [User!]!
  user(id: Float!): User!
  userExistByEmail(email: String!): BoolValue!
  userExistByUsername(username: String!): BoolValue!
  refreshToken(refreshToken: String!): TokenModel!
}

type Mutation {
  firstStageSignUp(firstStageUserInput: FirstStageUserInput!): User!
  secondStageSignUp(secondStageDTOInput: SecondStageDTOInput!): User!
  update(updateUserInput: UpdateUserInput!): User!
  remove(id: Float!): User!
  resetPassword(ResetPasswordInput: ResetPasswordInput!): Boolean!
  login(credentialsInput: CredentialsInput!): TokenModel!
}

input FirstStageUserInput {
  username: String!
  email: String!
  password: String!
}

input SecondStageDTOInput {
  id: Float!
  localization: String!
  telNumber: String!
  firstname: String!
  lastname: String!
  age: Float!
  gender: Float!
}

input UpdateUserInput {
  id: Int!
  username: String
  firstname: String
  lastname: String
  age: Float
  email: String
  localization: String
  telNumber: String
  password: String
  roles: [String!]
  gender: Gender
}

input ResetPasswordInput {
  token: String!
  verificationToken: String!
  email: String!
  password: String!
}

input CredentialsInput {
  username: String!
  password: String!
}
